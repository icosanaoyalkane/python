import os
import shutil
import glob
from pypdf import PdfReader, PdfWriter
import tkinter as tk
import pandas as pd
import tempfile
import msoffcrypto
from pathlib import WindowsPath
import win32com.client
from win32com.client.gencache import EnsureDispatch
import img2pdf
from PIL import Image


# Source
# https://pypdf.readthedocs.io/en/stable/user/encryption-decryption.html
# https://qiita.com/kira4845/items/b8182414370dffccc217
# https://qiita.com/daikan_murata/items/e1c38db8b41d141f12d8



def set_password(src_path, dst_path, user_password):

    reader = PdfReader(src_path)
    writer = PdfWriter()

    # Add all pages to the writer
    for page in reader.pages:
        writer.add_page(page)

    # Add a password to the new PDF
    writer.encrypt(user_password, algorithm="AES-256")

    # Save the new PDF to a file
    with open(dst_path, "wb") as f:
        writer.write(f)

def enter_info(file):
    # Create main window
    baseGround = tk.Tk()
    # Window size
    baseGround.geometry('500x300')
    # Title
    baseGround.title('Enter info.')

    # Label
    label1 = tk.Label(text='ファイル名：'+file+'\n'+'日時を入力してください_yymmdd ex)230101')
    label1.place(x=30, y=50)

    label2 = tk.Label(text='あんしん休暇を取得した対象者の氏名を入力してください ex)安心 太郎')
    label2.place(x=30, y=120)

    label3 = tk.Label(text='対象者の上司の氏名を入力してください ex)上司 太郎')
    label3.place(x=30, y=170)

    # Text box
    textBox1 = tk.Entry(width=40)
    textBox1.place(x=30, y=90)

    textBox2 = tk.Entry(width=40)
    textBox2.place(x=30, y=140)

    textBox3 = tk.Entry(width=40)
    textBox3.place(x=30, y=190)

    def val():
        # Get entered text
        global date, name, boss
        date = textBox1.get()
        name = textBox2.get()
        boss = textBox3.get()
        baseGround.destroy()
        return date, name, boss

    # Button
    button = tk.Button(baseGround,
                text = 'OK',
                # クリック時にval()関数を呼ぶ
                command = val
                ).place(x=30, y=240)

    baseGround.mainloop()

    return date, name, boss

def record_xlsx(xlsx_path, xlsx_pass, date, boss, name, filename):

    # パスワード付きExcelファイルを読み込む
    with open(xlsx_path,"rb") as f, tempfile.TemporaryFile() as tf:
        msfile = msoffcrypto.OfficeFile(f)
        msfile.load_key(password=xlsx_pass)
        msfile.decrypt(tf)

        df_xlsx = pd.read_excel(tf)
        print(df_xlsx)
        df = pd.DataFrame({
                            '受取日': date,
                            '上司': boss,
                            '対象者': name,
                            'ファイル名':filename},
                            index=[0])
        df_sum = pd.concat([df_xlsx, df], axis=0)
        df_sum = df_sum.reset_index(drop=True)

    return df_sum

def set_wb_password_with_win32(xlsx_new, xlsx_pass):
    xl_file = EnsureDispatch("Excel.Application")
    wb = xl_file.Workbooks.Open(xlsx_path)
    xl_file.DisplayAlerts = False
    wb.Visiable = False
    wb.SaveAs(xlsx_path, Password=xlsx_pass)
    wb.Close()
    xl_file.Quit()


### USER INPUT ###
IN_dir = r"---"
OUT_dir = r"---"
tmp_dir = r"---"
pdf_pass = '---'
xlsx_pass = '---' 
xlsx_path = r"---"
### USER INPUT ###


if __name__ == "__main__":

    """
    [0]前処理
    [1]INフォルダ内のファイル(Excel,画像)をPDFに変換
        -1. INフォルダの中身を一旦tmpフォルダに移動
        -2. tmpフォルダのファイルを拡張子別に仕分け
        -3. pdfファイルをそのままINファイルへ戻す
        -4. xlsxファイルをpdf化してINファイルへ戻す
        -5. 画像ファイルをpdf化してINファイルへ戻す
    [2]INフォルダ内のPDFにパスワードを掛けてOUTファイルに保存
    [3]Excel台帳に記載する情報を入力させる
    [4]入力情報をExcelに記帳し、パスをかけ直して保存
    [5]INファイルとtmpファイルを空にする

    """
    # [0]
    print('処理を開始します..')
    files = os.listdir(IN_dir)
    files_tmp = os.listdir(tmp_dir)

    # [1] -1.
    print('INフォルダの資料をPDFへ変換しています..')
    for f in files:
        shutil.move(os.path.join(IN_dir, f), tmp_dir)

    # [1] -2.
    files_ex_pdf = [os.path.basename(i) for i in glob.glob(tmp_dir + '/*.pdf', recursive=True) if os.path.isfile(i)]
    files_ex_xlsx = [os.path.basename(i) for i in glob.glob(tmp_dir + '/*.xl*', recursive=True) if os.path.isfile(i)]
    files_ex_jpg = [os.path.basename(i) for i in glob.glob(tmp_dir + '/*g', recursive=True) if os.path.isfile(i)]

    # [1] -3.
    for p in files_ex_pdf:
        shutil.move(os.path.join(tmp_dir, p), IN_dir)

    # [1] -4.
    for x in files_ex_xlsx:

        filename_without_ex = os.path.splitext(x)[0]
        ex = os.path.splitext(x)[1] #.xlsx
        pdf_FileName = os.path.join(IN_dir, filename_without_ex) + '.pdf'

        # Excel to pdf
        try:
            excel = win32com.client.Dispatch("Excel.Application")
            wb = excel.Workbooks.Open(os.path.join(tmp_dir, x))
            wb.ActiveSheet.ExportAsFixedFormat(0,pdf_FileName)

        finally:
            wb.Close()
            excel.Quit()

    # [1] -5.
    for j in files_ex_jpg:

        filename_without_ex = os.path.splitext(j)[0]
        ex = os.path.splitext(j)[1] #.jpeg/Jpeg/png ..
        pdf_FileName = os.path.join(IN_dir, filename_without_ex) + '.pdf'
        with open(pdf_FileName,"wb") as f:
                f.write(img2pdf.convert([Image.open(os.path.join(tmp_dir,j)).filename for j in os.listdir(tmp_dir)if j.endswith(ex)]))

    # [2]
    print('PDfに鍵をかけてOUTフォルダに格納しています..')
    files_new = os.listdir(IN_dir)
    for k in files_new:

        path_origin = os.path.join(IN_dir, k)
        path_pass = os.path.join(OUT_dir, k)

        set_password(path_origin, path_pass, pdf_pass)

        # [3]
        print('Excel台帳に記載する情報を入力してください..')
        date, name, boss = enter_info(k)
        df_sum = record_xlsx(xlsx_path, xlsx_pass, date, boss, name, k)
        print(df_sum)

        # [4]
        print('Excel台帳に記帳しています..')
        xlsx_new = df_sum.to_excel(xlsx_path, 'w', index=False)
        set_wb_password_with_win32(xlsx_new, xlsx_pass)

    # [5]
    print('INフォルダの資料を削除しています..')
    shutil.rmtree(IN_dir)
    if not os.path.exists(IN_dir) :
        os.mkdir(IN_dir)

    shutil.rmtree(tmp_dir)
    if not os.path.exists(tmp_dir) :
        os.mkdir(tmp_dir)

    print('お疲れ様でした！')
